class a{apiKey;apiUrl;apiModel;constructor(e){const{apiKey:t,apiUrl:s,apiModel:n}=e||{};if(this.apiKey=t||process.env.CLAUDE_API_KEY||"",this.apiUrl=s||process.env.CLAUDE_API_URL||"https://api.anthropic.com/v1/messages",this.apiModel=n||process.env.CLAUDE_API_MODEL||"claude-3-haiku-20240307",!this.apiKey)throw new Error("CLAUDE_API_KEY is not defined. You can obtain one from the Anthropic console: https://console.anthropic.com/settings/keys")}async sendToClaude(e){const t=await fetch(this.apiUrl,{method:"POST",headers:{"Content-Type":"application/json","x-api-key":this.apiKey,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:this.apiModel,max_tokens:1024,messages:[{role:"user",content:e}]})});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}, response: \n${JSON.stringify(await t.json(),null,2)}`);return(await t.json()).content[0].text}async translateText(e,t,s){const n=t||"English",r=`Translate the following text ${!s?"":`(context: ${s})`} to \`${n}\` language: \n\n${e}`;return this.sendToClaude(r)}async detectLanguage(e){const t=`Detect the language of the following text. Respond with only 2-letters ISO_639-1 language code: \n\n${e}`;return this.sendToClaude(t)}async correctText(e){const t=`Correct any grammar and spelling errors in the following text. Provide only the corrected text: \n\n${e}`;return this.sendToClaude(t)}async summarizeText(e,t){const n=`Summarize the following text ${t?`in approximately ${t} words`:""}. Provide only the summary: \n\n${e}`;return this.sendToClaude(n)}async generateText(e,t){const n=`Generate a coherent and contextually relevant text ${t?`in approximately ${t} words`:""} based on the following prompt: \n\n${e}`;return this.sendToClaude(n)}async paraphraseText(e){const t=`Paraphrase the following text to convey the same meaning using different words and sentence structures. Provide only the paraphrased text: \n\n${e}`;return this.sendToClaude(t)}async classifyText(e,t){const n=`Classify the following text into one of these categories: ${t.join(", ")}. Respond with only the chosen category: \n\n${e}`;return this.sendToClaude(n)}async extractKeywords(e,t){const n=`Extract the most important or relevant keywords or phrases from the following text. ${t?`Limit the output to ${t} keywords.`:""} Provide the keywords as a comma-separated list: \n\n${e}`;return(await this.sendToClaude(n)).split(",").map((r)=>r.trim())}async extractEntities(e){const t=`Extract named entities (names, dates, locations, organizations) from the following text. Provide the output as a JSON object only where keys are entity types and values are arrays of extracted entities: \n\n${e}`,s=await this.sendToClaude(t);return JSON.parse(s)}async analyzeSentiment(e){const t=`Analyze the sentiment of the following text. Respond with only one word: positive, negative, or neutral: \n\n${e}`;return this.sendToClaude(t)}async checkForOffensiveLanguage(e){const t=`Rate (response only digit) the offensiveness of the following message on a scale from 1 to 10, where 1 is very peaceful and 10 is extremely aggressive: "${e}"`,s=await this.sendToClaude(t);return parseInt(s)}async checkForProfanity(e){const t=`Rate (response only digit) the level of profanity in the following message on a scale from 1 to 10, where 1 is very clean and 10 is extremely profane: "${e}"`,s=await this.sendToClaude(t);return parseInt(s)}async detectEmotion(e){const t=`Detect the primary emotion in the following text. Respond with only one word representing the emotion (e.g., joy, sadness, anger, fear, surprise, disgust): \n\n${e}`;return this.sendToClaude(t)}async answerQuestion(e,t){const s=`Based on the following context, answer the question. Provide only the answer:\n\nContext: ${t}\n\nQuestion: ${e}`;return this.sendToClaude(s)}async captionImage(e){const s=`Generate a descriptive caption for this image: [IMAGE]${e.toString("base64")}[/IMAGE]`;return this.sendToClaude(s)}async extractTextFromImage(e){const s=`Extract and provide all text visible in this image: [IMAGE]${e.toString("base64")}[/IMAGE]`;return this.sendToClaude(s)}async detectObjectsInImage(e){const s=`Identify and locate objects in this image: [IMAGE]${e.toString("base64")}[/IMAGE]. Provide the output as a JSON object where keys are object names and values are arrays of [x, y, width, height] representing bounding boxes.`,n=await this.sendToClaude(s);return JSON.parse(n)}async searchObjectInImage(e,t){const n=`In this image: [IMAGE]${e.toString("base64")}[/IMAGE], locate the object described as: "${t}". If found, provide the bounding box as an array of [x, y, width, height]. If not found, respond with "null".`,o=await this.sendToClaude(n);return JSON.parse(o)}async checkImageForViolence(e){const s=`Rate (response only digit) the level of violence in the following image on a scale from 1 to 10, where 1 is very peaceful and 10 is extremely violent: [IMAGE]${e.toString("base64")}[/IMAGE]`,n=await this.sendToClaude(s);return parseInt(n)||1}async checkImageForPornography(e){const s=`Rate (response only digit) the level of pornographic content in the following image on a scale from 1 to 10, where 1 is not pornographic at all and 10 is extremely pornographic: [IMAGE]${e.toString("base64")}[/IMAGE]`,n=await this.sendToClaude(s);return parseInt(n)||1}async analyzeFacialExpression(e){const s=`Analyze the facial expressions in this image and determine the emotions: [IMAGE]${e.toString("base64")}[/IMAGE]. Provide the output as a JSON object where keys are detected faces (e.g., "face1", "face2") and values are the corresponding emotions.`,n=await this.sendToClaude(s);return JSON.parse(n)}async detectEmotionInVoice(e){const s=`Analyze the emotion in this voice recording: [AUDIO]${e.toString("base64")}[/AUDIO]. Respond with only one word representing the primary emotion detected (e.g., joy, sadness, anger, fear, surprise, neutral).`;return this.sendToClaude(s)}async speechToText(e){const s=`Transcribe the spoken words in this audio recording into text: [AUDIO]${e.toString("base64")}[/AUDIO]. Provide only the transcribed text.`;return this.sendToClaude(s)}}export{a as Assistant};
